{{#> modal modal_id="edit-post-modal"}}
  <h2>{{t "post.edit"}}</h2>
  <div id="edit-error-block">{{> error error=null}}</div>
  <form id="edit-post-form" enctype="multipart/form-data">
    <div id="text-fields" class="type-fields">
      <label for="text-caption">{{t "post.caption"}}</label>
      <input type="text" id="text-caption" name="text-caption" placeholder="{{t 'post.caption'}}" maxlength="100">
      <label for="text-content">{{t "post.text_content"}}</label>
      <textarea id="text-content" name="text-content" placeholder="{{t 'post.text_content'}}"></textarea>
    </div>
    <div id="images-fields" class="type-fields type-fields-hidden">
      <label for="images-caption">{{t "post.caption"}}</label>
      <input type="text" id="images-caption" name="images-caption" placeholder="{{t 'post.caption'}}" maxlength="100">
      <label for="images">{{t "post.add_new_images"}}</label>
      <input type="file" id="images" name="images" multiple accept="image/*">
      <div id="image-preview" class="preview-container"></div>
      <div id="existing-images" class="existing-media-container">
        <h4>{{t "post.current_images"}}</h4>
        <div id="existing-images-list"></div>
      </div>
    </div>
    <div id="video-fields" class="type-fields type-fields-hidden">
      <label for="video-caption">{{t "post.caption"}}</label>
      <input type="text" id="video-caption" name="video-caption" placeholder="{{t 'post.caption'}}" maxlength="100">
      <label for="video">{{t "post.upload_new_video"}}</label>
      <input type="file" id="video" name="video" accept="video/*">
      <div id="video-preview" class="preview-container"></div>
      <div id="existing-video" class="existing-media-container"></div>
    </div>
    <div>
      <button type="submit" class="btn">{{t "post.update"}}</button>
      <button type="button" class="btn btn-secondary" onclick="closeEditModal()">{{t "profile.cancel"}}</button>
    </div>
  </form>
{{/modal}}

<script>
  let currentPostId = null;
  let currentPostType = null;
  let existingImageUrls = [];

  const form = document.getElementById('edit-post-form');
  const textFields = document.getElementById('text-fields');
  const imagesFields = document.getElementById('images-fields');
  const videoFields = document.getElementById('video-fields');
  const imagePreview = document.getElementById('image-preview');
  const videoPreview = document.getElementById('video-preview');
  const existingImagesList = document.getElementById('existing-images-list');
  const existingVideo = document.getElementById('existing-video');
  
  function showFields(type) {
    // Hide all fields first
    textFields.classList.add('type-fields-hidden');
    imagesFields.classList.add('type-fields-hidden');
    videoFields.classList.add('type-fields-hidden');
    
    // Show only the relevant field
    if (type === 'text') {
      textFields.classList.remove('type-fields-hidden');
    } else if (type === 'images') {
      imagesFields.classList.remove('type-fields-hidden');
    } else if (type === 'video') {
      videoFields.classList.remove('type-fields-hidden');
    }
  }

  // Handle image preview
  document.getElementById('images').addEventListener('change', function(e) {
    const files = e.target.files;
    imagePreview.innerHTML = '';
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const div = document.createElement('div');
          div.className = 'preview-item';
          div.innerHTML = `
            <img src="${e.target.result}" alt="Preview">
            <button type="button" class="remove-file" onclick="removeNewFile(this, ${i})">×</button>
          `;
          imagePreview.appendChild(div);
        };
        reader.readAsDataURL(file);
      }
    }
  });

  // Handle video preview
  document.getElementById('video').addEventListener('change', function(e) {
    const file = e.target.files[0];
    videoPreview.innerHTML = '';
    
    if (file && file.type.startsWith('video/')) {
      const reader = new FileReader();
      reader.onload = function(e) {
        const div = document.createElement('div');
        div.className = 'preview-item';
        div.innerHTML = `
          <video controls src="${e.target.result}"></video>
          <button type="button" class="remove-file" onclick="removeFile(this, 0)">×</button>
        `;
        videoPreview.appendChild(div);
      };
      reader.readAsDataURL(file);
    }
  });

  function removeNewFile(button, index) {
    const input = document.getElementById('images');
    const dt = new DataTransfer();
    const { files } = input;
    
    for (let i = 0; i < files.length; i++) {
      if (i !== index) {
        dt.items.add(files[i]);
      }
    }
    input.files = dt.files;
    button.parentElement.remove();
  }

  function removeExistingImage(imageUrl) {
    const index = existingImageUrls.indexOf(imageUrl);
    if (index > -1) {
      existingImageUrls.splice(index, 1);
      renderExistingImages();
    }
  }

  function renderExistingImages() {
    existingImagesList.innerHTML = '';
    existingImageUrls.forEach((url, index) => {
      const div = document.createElement('div');
      div.className = 'preview-item existing-media-item';
      div.innerHTML = `
        <img src="${url}" alt="Existing image">
        <button type="button" class="remove-file" onclick="removeExistingImage('${url}')">×</button>
      `;
      existingImagesList.appendChild(div);
    });
  }

  function loadPostData(postId) {
    currentPostId = postId;
    
    fetch(`/post/${postId}/edit`)
      .then(res => res.json())
      .then(data => {
        if (data.error) {
          alert(data.error);
          return;
        }
        
        const post = data.post;
        currentPostType = post.type;
        
        // Show the correct fields based on post type
        showFields(post.type);
        
        // Populate fields based on type
        if (post.type === 'text') {
          document.getElementById('text-caption').value = post.caption;
          document.getElementById('text-content').value = post.content;
        } else if (post.type === 'images') {
          document.getElementById('images-caption').value = post.caption;
          // Store existing images for selective removal
          existingImageUrls = post.content.split('\n').filter(url => url.trim() !== '');
          renderExistingImages();
        } else if (post.type === 'video') {
          document.getElementById('video-caption').value = post.caption;
          // Show existing video
          const videoUrl = post.content;
          existingVideo.innerHTML = '';
          const div = document.createElement('div');
          div.className = 'existing-media-item';
          div.innerHTML = `
            <video controls src="${videoUrl}"></video>
            <p>{{t "post.current_video"}}</p>
          `;
          existingVideo.appendChild(div);
        }
        
        // Show modal
        document.getElementById('edit-post-modal').classList.add('active');
      })
      .catch(err => {
        console.error('Error loading post data:', err);
        alert('{{t "post.error_loading"}}');
      });
  }

  function closeEditModal() {
    document.getElementById('edit-post-modal').classList.remove('active');
    // Clear form
    form.reset();
    imagePreview.innerHTML = '';
    videoPreview.innerHTML = '';
    existingImagesList.innerHTML = '';
    existingVideo.innerHTML = '';
    existingImageUrls = [];
    currentPostId = null;
    currentPostType = null;
  }

  // Handle form submission
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const formData = new FormData();
    
    // Add fields based on current post type
    if (currentPostType === 'text') {
      formData.append('caption', document.getElementById('text-caption').value);
      formData.append('content', document.getElementById('text-content').value);
    } else if (currentPostType === 'images') {
      formData.append('caption', document.getElementById('images-caption').value);
      
      // Add new images
      const newImages = document.getElementById('images').files;
      for (let i = 0; i < newImages.length; i++) {
        formData.append('images', newImages[i]);
      }
      
      // Add existing images that weren't removed
      formData.append('existing-images', JSON.stringify(existingImageUrls));
    } else if (currentPostType === 'video') {
      formData.append('caption', document.getElementById('video-caption').value);
      
      // Add new video if uploaded
      const newVideo = document.getElementById('video').files[0];
      if (newVideo) {
        formData.append('video', newVideo);
      }
    }
    
    // Submit update
    fetch(`/post/${currentPostId}/edit/${currentPostType}`, {
      method: 'PUT',
      body: formData
    })
    .then(res => res.json())
    .then(data => {
      if (data.error) {
        const errorBlock = document.getElementById('edit-error-block');
        errorBlock.innerHTML = `<div class="error-message">${data.error}</div>`;
      } else {
        // Success - reload the page to show updated content
        window.location.reload();
      }
    })
    .catch(err => {
      console.error('Error updating post:', err);
      const errorBlock = document.getElementById('edit-error-block');
      errorBlock.innerHTML = '<div class="error-message">{{t "post.network_error"}}</div>';
    });
  });

  // Global function for modal control
  window.closeEditModal = closeEditModal;
</script>