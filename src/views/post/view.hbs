<div class="card post">
  <div class="post-header">
    <div class="post-header-left">
      <img src="{{post.avatar_url}}" alt="{{post.username}}'s avatar" class="post-avatar">
      <a href="/@{{post.username}}" class="post-username-link">{{post.username}}</a>
    </div>
    {{#if (or (eq session_user.id post.user_id) (eq session_user.role 'moderator') (eq session_user.role 'administrator'))}}
      <div class="post-actions-buttons">
        {{#if (eq session_user.id post.user_id)}}
          <button class="btn edit-post-btn" data-post-id="{{post.id}}"><img src="/assets/pencil.png"></button>
        {{/if}}
        <button class="btn delete-post-btn" data-post-id="{{post.id}}"><img src="/assets/delete.png"></button>
      </div>
    {{/if}}
  </div>
  {{#if (eq post.type 'images')}}
    {{#with (splitLines post.content) as |lines|}}
      <div class="post-title">{{lines.[0]}}</div>
      <div class="post-images-grid">
        {{#each lines}}
          {{#unless @first}}
            <img src="{{this}}" alt="Image" class="post-image">
          {{/unless}}
        {{/each}}
      </div>
    {{/with}}
  {{else if (eq post.type 'video')}}
    {{#with (splitLines post.content) as |lines|}}
      <div class="post-title">{{lines.[0]}}</div>
      <video src="{{lines.[1]}}" controls class="post-video"></video>
    {{/with}}
  {{else}}
    {{#with (splitLines post.content) as |lines|}}
      <div class="post-title">{{lines.[0]}}</div>
      <div class="post-content-text">{{joinLines lines 1}}</div>
    {{/with}}
  {{/if}}
  <div class="post-actions">
    <span class="like-count" data-post-id="{{post.id}}">{{post.likeCount}}</span>
    {{#if post.liked}}
      <button class="like-btn" data-post-id="{{post.id}}" data-liked="true">{{t "post.unlike"}}</button>
    {{else}}
      <button class="like-btn" data-post-id="{{post.id}}" data-liked="false">{{t "post.like"}}</button>
    {{/if}}
  </div>
  <p class="post-date"><small>{{t "post.posted_on" date=(localDate post.created_at)}}
    {{#if (neq post.created_at post.updated_at)}}
      {{t "post.edited"}}
    {{/if}}
  </small></p>
</div>

{{> post-edit-modal}}

<div class="card comments-section">
  <h3>{{t "post.comments"}}</h3>
  <div id="comments-list">
    {{#if comments.length}}
      <ul id="comments-ul">
        {{#each comments}}
          {{> comment
            comment=this
            should_show_delete_button=(or (eq ../session_user.id user_id) (eq ../session_user.role 'moderator') (eq ../session_user.role 'administrator'))
            should_show_edit_button=(eq ../session_user.id user_id)
          }}
        {{/each}}
      </ul>
    {{else}}
      <p id="no-comments">{{t "post.no_comments"}}</p>
    {{/if}}
  </div>
  {{#if session_user}}
    {{#if session_user.email_verified}}
      <form id="add-comment-form" action="/api/comment/{{post.id}}" method="POST">
        <div id="comment-error-block">{{> error error=null}}</div>
        <textarea name="content" id="comment-content" rows="2" placeholder="{{t 'post.add_comment'}}" required class="comment-textarea"></textarea>
        <button type="submit" class="btn">{{t "post.post_comment"}}</button>
      </form>
    {{else}}
      <div class="email-verification-warning">
        <p>{{t "post.verify_email_to_comment"}}</p>
        <div class="verification-actions">
          <a href="/auth/verify-email" class="btn btn-primary">{{t "post.verify_email_button"}}</a>
        </div>
      </div>
    {{/if}}
  {{else}}
    <p class="login-prompt">{{{t "post.login_to_comment"}}}</p>
  {{/if}}
</div>

{{#if session_user.email_verified}}
<script>
document.addEventListener('DOMContentLoaded', function () {
  const form = document.getElementById('add-comment-form');
  const errorDiv = document.getElementById('comment-error-block');
  
  // Post edit functionality
  const editPostBtn = document.querySelector('.edit-post-btn');
  if (editPostBtn) {
    editPostBtn.addEventListener('click', function() {
      const postId = this.getAttribute('data-post-id');
      loadPostData(postId);
    });
  }
  
  // Post delete functionality
  const deletePostBtn = document.querySelector('.delete-post-btn');
  if (deletePostBtn) {
    deletePostBtn.addEventListener('click', async function() {
      if (!confirm('{{t "post.delete_confirm"}}')) return;
      
      const postId = this.getAttribute('data-post-id');
      try {
        const res = await fetch(`/api/post/${postId}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        
        if (res.ok) {
          window.location.href = '/';
        } else {
          const data = await res.json().catch(() => ({}));
          alert(data.error || '{{t "post.delete_failed"}}');
        }
      } catch (err) {
        alert('{{t "post.network_error"}}');
      }
    });
  }

  // Comment delete functionality
  document.addEventListener('click', async function(e) {
    if (e.target.classList.contains('delete-comment-btn')) {
      if (!confirm('{{t "post.comment_delete_confirm"}}')) return;
      
      const commentId = e.target.getAttribute('data-comment-id');
      const commentItem = e.target.closest('.comment-item');
      
      try {
        const res = await fetch(`/api/comment/${commentId}`, {
          method: 'DELETE',
          credentials: 'include'
        });
        
        if (res.ok) {
          commentItem.remove();
          // Check if there are no more comments
          const commentsList = document.getElementById('comments-ul');
          if (commentsList && commentsList.children.length === 0) {
            const noComments = document.createElement('p');
            noComments.id = 'no-comments';
            noComments.textContent = '{{t "post.no_comments"}}';
            document.getElementById('comments-list').appendChild(noComments);
          }
        } else {
          const data = await res.json().catch(() => ({}));
          alert(data.error || '{{t "post.comment_delete_failed"}}');
        }
      } catch (err) {
        alert('{{t "post.network_error"}}');
      }
    }

    // Comment edit functionality
    if (e.target.classList.contains('edit-comment-btn')) {
      const commentId = e.target.getAttribute('data-comment-id');
      const commentItem = e.target.closest('.comment-item');
      const commentContent = commentItem.querySelector('.comment-content');
      const commentEditForm = commentItem.querySelector('.comment-edit-form');
      const commentTextarea = commentItem.querySelector('.comment-edit-textarea');
      const commentText = commentItem.querySelector('.comment-text');
      
      // Load comment data
      try {
        const res = await fetch(`/api/comment/${commentId}/edit`, {
          credentials: 'include'
        });
        
        if (res.ok) {
          const data = await res.json();
          commentTextarea.value = data.comment.content;
          commentContent.style.display = 'none';
          commentEditForm.style.display = 'block';
          commentTextarea.focus();
        } else {
          const data = await res.json().catch(() => ({}));
          alert(data.error || '{{t "post.comment_load_failed"}}');
        }
      } catch (err) {
        alert('{{t "post.network_error"}}');
      }
    }

    // Save comment edit
    if (e.target.classList.contains('btn-save-comment')) {
      const commentItem = e.target.closest('.comment-item');
      const commentId = commentItem.getAttribute('data-comment-id');
      const commentTextarea = commentItem.querySelector('.comment-edit-textarea');
      const commentContent = commentItem.querySelector('.comment-content');
      const commentEditForm = commentItem.querySelector('.comment-edit-form');
      const commentText = commentItem.querySelector('.comment-text');
      
      try {
        const res = await fetch(`/api/comment/${commentId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ content: commentTextarea.value }),
          credentials: 'include'
        });
        
        if (res.ok) {
          const data = await res.json();
          commentText.textContent = data.comment.content;
          commentContent.style.display = 'block';
          commentEditForm.style.display = 'none';
        } else {
          const data = await res.json().catch(() => ({}));
          alert(data.error || '{{t "post.network_error"}}');
        }
      } catch (err) {
        alert('{{t "post.network_error"}}');
      }
    }

    // Cancel comment edit
    if (e.target.classList.contains('btn-cancel-comment')) {
      const commentItem = e.target.closest('.comment-item');
      const commentContent = commentItem.querySelector('.comment-content');
      const commentEditForm = commentItem.querySelector('.comment-edit-form');
      
      commentContent.style.display = 'block';
      commentEditForm.style.display = 'none';
    }
  });

  // Comment form submission
  if (form) {
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      const formData = new FormData(form);
      const content = formData.get('content');
      
      if (!content.trim()) {
        return;
      }
      
      try {
        const res = await fetch(form.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ content }),
          credentials: 'include'
        });
        
        if (res.ok) {
          const data = await res.json();
          
          // Add the new comment to the list
          const commentsList = document.getElementById('comments-ul');
          const noComments = document.getElementById('no-comments');
          
          if (noComments) {
            noComments.remove();
          }
          
          if (!commentsList) {
            const newCommentsList = document.createElement('ul');
            newCommentsList.id = 'comments-ul';
            document.getElementById('comments-list').appendChild(newCommentsList);
          }
          
          // Create comment HTML (you'll need to adjust this based on your comment partial)
          fetch(`/partials/comment/${data.comment.id}`)
            .then(res => {
              if (!res.ok) throw new Error('Failed to fetch comment partial');
              return res.text();
            })
            .then(commentHtml => {
              document.getElementById('comments-ul').insertAdjacentHTML('beforeend', commentHtml);
            })
            .catch(err => {
              console.error('Failed to fetch comment partial:', err);
              // fallback: show a simple error or fallback comment
            });
          
          // Clear the form
          form.reset();
          
        } else {
          const data = await res.json().catch(() => ({}));
          const errorHtml = `<div class="error-message">${data.error || '{{t "post.network_error"}}'}</div>`;
          errorDiv.innerHTML = errorHtml;
        }
      } catch (err) {
        const errorHtml = `<div class="error-message">{{t "post.network_error"}}</div>`;
        errorDiv.innerHTML = errorHtml;
      }
    });
  }
});
</script>
{{/if}}

{{#if session_user}}
<script>
  // Like functionality
  const likeBtn = document.querySelector('.like-btn');
  if (likeBtn) {
    likeBtn.addEventListener('click', async function() {
      const postId = likeBtn.getAttribute('data-post-id');
      const liked = likeBtn.getAttribute('data-liked') === 'true';
      const likeCountSpan = document.querySelector(`.like-count[data-post-id='${postId}']`);
      likeBtn.disabled = true;
      try {
        if (!liked) {
          // Like
          const res = await fetch(`/api/like/${postId}`, { method: 'POST', credentials: 'include' });
          if (res.ok) {
            likeBtn.textContent = 'Unlike';
            likeBtn.setAttribute('data-liked', 'true');
            if (likeCountSpan) likeCountSpan.textContent = parseInt(likeCountSpan.textContent) + 1;
          }
        } else {
          // Unlike
          const res = await fetch(`/api/like/${postId}`, { method: 'DELETE', credentials: 'include' });
          if (res.ok) {
            likeBtn.textContent = 'Like';
            likeBtn.setAttribute('data-liked', 'false');
            if (likeCountSpan) likeCountSpan.textContent = Math.max(0, parseInt(likeCountSpan.textContent) - 1);
          }
        }
      } finally {
        likeBtn.disabled = false;
      }
    });
  }
</script>
{{/if}}